#!/usr/bin/python

# -------------------------------------------------------------------------------
# Name:        RIP Config
# Purpose:	   Cau hinh dinh tuyen dong theo kieu RIP
# Author:      HungP
# Created:     25/12/2017
# Copyright:   (c) HungP 2017
# Licence:     1.0
# -------------------------------------------------------------------------------

# Import thu vien python va cac lop khac
import re
import os
import sys
from datetime import datetime
import logging

class RIP(object):
	"""docstring for ClassName"""
	def __init__(self, id_rip, logger):
		self.id_rip = id_rip
		self.logger = logger
	def add(self):
		self.logger.info("Add config RIP")
		self.logger.info("get info config rip")
		# rip_info = {'status':int(self.id_rip['status']),
		# 			'networks':['192.168.0.0/24','10.2.3.0/24'],
		# 			'interfaces':[{'interface':'port0','authentication':'','passive':'0'},{'interface':'port1','authentication':'','passive':'0'}],
		# 			'AdvancedOptions':{'default_metric':self.id_rip['default_metric'],
		# 								'info_originate':str(self.id_rip['default_infomation_originate']),
		# 								'timers':{'update':self.id_rip['timer_update'],'timeout':self.id_rip['timer_timeout'],'garbage':self.id_rip['timer_garbage']},
		# 								'resdistribute_connected':{'status':1,'metric':0},
		# 								'resdistribute_static':{'status':1,'metric':0},
		# 								'resdistribute_ospf':{'status':1,'metric':0},
		# 								'resdistribute_bgp':{'status':1,'metric':0}}
		# }
		rip_info = {'status':1,
					'networks':['192.168.0.0/24','172.10.100.0/24'],
					'interfaces':[{'interface':'port0','authentication':'123456','passive':'0'},{'interface':'port1','authentication':'123456','passive':'0'}],
					'AdvancedOptions':{'default_metric':'1',
										'info_originate':0,
										'timers':{'update':'30','timeout':'180','garbage':'120'},
										'resdistribute_connected':{'status':0,'metric':''},
										'resdistribute_static':{'status':1,'metric':''},
										'resdistribute_ospf':{'status':0,'metric':''},
										'resdistribute_bgp':{'status':0,'metric':''}}
		}
		
		# networks = []
		# if (len(self.id_rip['networks']) != 0):
		# 	for item in self.id_rip['networks']:
				
		# interfaces = []
		# if (len(self.id_rip['networks']) != 0):
		# 	for item in self.id_rip['networks']:
		self.logger.info(rip_info)
		self.logger.info("Creat rip config")
		
		network = ""
		if len(rip_info['networks']) != 0:
			for item in rip_info['networks']:
				network+= " network "+item+"\n"
		interface = ""
		passive_interface = ""
		if len(rip_info['interfaces']) != 0:
			for item in rip_info['interfaces']:
				interface += "interface "+item['interface']+"\n"
				if item['authentication'] != "":
					interface += " ip rip authentication mode md5\n"
					interface += " ip rip authentication string "+item['authentication']+"\n"
				if int(item['passive']) == 1:
					passive_interface += " passive-interface "+item['interface']+"\n"
		# Advanced Options
		advanced_options = ""
		if str(rip_info['AdvancedOptions']['default_metric']) != "" :
			advanced_options += " default-metric "+str(rip_info['AdvancedOptions']['default_metric'])+"\n"

		if int(rip_info['AdvancedOptions']['info_originate']) == 1 :
			advanced_options += " default-information originate\n"

		advanced_options +=" timers basic "+rip_info['AdvancedOptions']['timers']['update']+" "+rip_info['AdvancedOptions']['timers']['timeout']+" "+rip_info['AdvancedOptions']['timers']['garbage']+"\n"

		if int(rip_info['AdvancedOptions']['resdistribute_connected']['status']) == 1:
			tmp = " redistribute connected\n"
			if str(rip_info['AdvancedOptions']['resdistribute_connected']['metric']) != "":
				tmp.replace("\n"," metric "+str(rip_info['AdvancedOptions']['resdistribute_connected']['metric'])+"\n")
			advanced_options += tmp

		if int(rip_info['AdvancedOptions']['resdistribute_static']['status']) == 1:
			tmp = " redistribute static\n"
			if str(rip_info['AdvancedOptions']['resdistribute_static']['metric']) != "":
				tmp.replace("\n"," metric "+str(rip_info['AdvancedOptions']['resdistribute_static']['metric'])+"\n")
			advanced_options += tmp

		if int(rip_info['AdvancedOptions']['resdistribute_ospf']['status']) == 1:
			tmp = " redistribute ospf\n"
			if str(rip_info['AdvancedOptions']['resdistribute_ospf']['metric']) != "":
				tmp.replace("\n"," metric "+str(rip_info['AdvancedOptions']['resdistribute_ospf']['metric'])+"\n")
			advanced_options += tmp

		if int(rip_info['AdvancedOptions']['resdistribute_bgp']['status']) == 1:
			tmp = " redistribute bgp\n"
			if str(rip_info['AdvancedOptions']['resdistribute_bgp']['metric']) != "":
				tmp.replace("\n"," metric "+str(rip_info['AdvancedOptions']['resdistribute_bgp']['metric'])+"\n")
			advanced_options += tmp

		rip_conf = """
!-*- rip -*-
! ripd configuration saved from bif
!   """+datetime.now().strftime('%Y/%m/%d %H:%M:%S')+"""
!
hostname ripd
password bifngfw
log file /var/log/quagga/ripd.log
log stdout
!
debug rip events
debug rip packet
!
"""+interface+"""!
router rip
 version 2
!
"""+advanced_options+"""!
"""+network+passive_interface+"""!
line vty
!

"""
		self.logger.info(rip_conf)
		self.write_file("/etc/quagga/ripd.conf",rip_conf)
		os.popen("chown quagga:quagga /etc/quagga/ripd.conf")

		f = open ("/etc/quagga/daemons","r")
		contents = f.readlines()
		f.close()
		if int(rip_info['status']) == 1:
			contents = self.findandreplace(contents,'yes','ripd=')
		else:
			contents = self.findandreplace(contents,'no','ripd=')
		f = open("/etc/quagga/daemons", "w")
		cn = "".join(contents)
		f.write(cn)
		f.close()

		self.logger.info("Restart quagga")
		output = os.popen("service quagga restart").read()
		self.logger.info(output)

	def remove(self):
		self.logger.info("remove file config ripd")
		os.popen("rm /etc/quagga/ripd.conf")
		f = open ("/etc/quagga/daemons","r")
		contents = f.readlines()
		f.close()
		contents = self.findandreplace(contents,'no','ripd=')
		f = open("/etc/quagga/daemons", "w")
		cn = "".join(contents)
		f.write(cn)
		f.close()
		self.logger.info("Restart quagga")
		output = os.popen("service quagga restart").read()
		self.logger.info(output)

	def edit(self):
		self.remove()
		self.add()
	def write_file(self,path_file,data):
		f = open(path_file,"w")
		f.write(data)
		f.close()
	def findandreplace(self, contents, new_text, text):
		conten = contents
		for index, item in enumerate(conten):
			if item.find(text) != -1:
				tmp = text + str(new_text)+"\n"
				conten[index] = tmp				
		return conten
		

if __name__ == '__main__':
	logger  = logging.getLogger('debugcore')
	hdlr = logging.FileHandler('/var/log/corebif/debugcore.log')
	formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
	hdlr.setFormatter(formatter)
	logger.addHandler(hdlr) 
	logger.setLevel(logging.INFO)
	test = RIP('test',logger)
	test.remove()